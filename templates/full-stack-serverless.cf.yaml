{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "full-stack",
  "Outputs": {
    "APIGatewayEndpoint": {
      "Description": "API Gateway endpoint URL for Prod stage",
      "Value": {
        "Fn::Sub": "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      }
    },
    "CloudFrontDistributionId": {
      "Description": "CloudFront Distribution ID for hosting web front end",
      "Value": {
        "Ref": "CloudFrontDistribution"
      }
    },
    "CloudFrontDistributionDomainName": {
      "Description": "CloudFront Distribution Domain Name for accessing web front end",
      "Value": {
        "Fn::GetAtt": [
          "CloudFrontDistribution",
          "DomainName"
        ]
      }
    },
    "WebS3BucketName": {
      "Description": "S3 Bucket for hosting web frontend",
      "Value": {
        "Ref": "WebSiteBucket"
      }
    }
  },
  "Resources": {
    "WebSiteBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "BucketKeyEnabled": true
            }
          ]
        },
        "VersioningConfiguration": {
          "Status": "Enabled"
        }
      },
      "Metadata": {
        "SamResourceId": "WebSiteBucket"
      }
    },
    "ApiGatewayApiDeployment12742d3e7b": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "Description": "RestApi deployment id: 12742d3e7bdcd3419d11428db8b78cd911725628",
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        },
        "StageName": "Stage"
      }
    },
    "ApiGatewayApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Metadata": {
        "SamResourceId": "ApiGatewayApi"
      },
      "Properties": {
        "Body": {
          "info": {
            "version": "1.0",
            "title": {
              "Ref": "AWS::StackName"
            }
          },
          "paths": {
            "/": {
              "post": {
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putItemFunction.Arn}/invocations"
                  }
                },
                "responses": {}
              },
              "options": {
                "x-amazon-apigateway-integration": {
                  "type": "mock",
                  "requestTemplates": {
                    "application/json": "{\n  \"statusCode\" : 200\n}\n"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseTemplates": {
                        "application/json": "{}\n"
                      },
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS, POST, GET'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'"
                      }
                    }
                  }
                },
                "consumes": [
                  "application/json"
                ],
                "summary": "CORS support",
                "responses": {
                  "200": {
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      }
                    },
                    "description": "Default response for CORS method"
                  }
                },
                "produces": [
                  "application/json"
                ]
              },
              "get": {
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllItemsFunction.Arn}/invocations"
                  }
                },
                "responses": {}
              }
            },
            "/{id}": {
              "options": {
                "x-amazon-apigateway-integration": {
                  "type": "mock",
                  "requestTemplates": {
                    "application/json": "{\n  \"statusCode\" : 200\n}\n"
                  },
                  "responses": {
                    "default": {
                      "statusCode": "200",
                      "responseTemplates": {
                        "application/json": "{}\n"
                      },
                      "responseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS, POST, GET'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type'"
                      }
                    }
                  }
                },
                "consumes": [
                  "application/json"
                ],
                "summary": "CORS support",
                "responses": {
                  "200": {
                    "headers": {
                      "Access-Control-Allow-Origin": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Headers": {
                        "type": "string"
                      },
                      "Access-Control-Allow-Methods": {
                        "type": "string"
                      }
                    },
                    "description": "Default response for CORS method"
                  }
                },
                "produces": [
                  "application/json"
                ]
              },
              "get": {
                "x-amazon-apigateway-integration": {
                  "httpMethod": "POST",
                  "type": "aws_proxy",
                  "uri": {
                    "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getByIdFunction.Arn}/invocations"
                  }
                },
                "responses": {}
              }
            }
          },
          "swagger": "2.0"
        }
      }
    },
    "putItemFunctionApiPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "putItemFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/",
            {
              "__ApiId__": {
                "Ref": "ApiGatewayApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "putItemFunction": {
      "Type": "AWS::Lambda::Function",
      "Metadata": {
        "SamResourceId": "putItemFunction"
      },
      "Properties": {
        "Code": {
          "S3Bucket": "aws-sam-cli-managed-default-samclisourcebucket-cdm7fsxvrzmx",
          "S3Key": "full-stack/991609bebd584c4458cf5891bbcec92c"
        },
        "Description": "A simple example includes a HTTP post method to add one item to a DynamoDB table.",
        "Handler": "src/handlers/put-item.putItemHandler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "putItemFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 100,
        "Environment": {
          "Variables": {
            "SAMPLE_TABLE": {
              "Ref": "SampleTable"
            },
            "ENDPOINT_OVERRIDE": ""
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Architectures": [
          "x86_64"
        ]
      }
    },
    "CloudFrontDistribution": {
      "Type": "AWS::CloudFront::Distribution",
      "Properties": {
        "DistributionConfig": {
          "Origins": [
            {
              "DomainName": {
                "Fn::GetAtt": [
                  "WebSiteBucket",
                  "RegionalDomainName"
                ]
              },
              "Id": "myS3Origin",
              "OriginAccessControlId": {
                "Fn::GetAtt": [
                  "CloudFrontOriginAccessControl",
                  "Id"
                ]
              },
              "S3OriginConfig": {
                "OriginAccessIdentity": ""
              }
            }
          ],
          "Enabled": true,
          "DefaultRootObject": "index.html",
          "HttpVersion": "http2",
          "DefaultCacheBehavior": {
            "AllowedMethods": [
              "DELETE",
              "GET",
              "HEAD",
              "OPTIONS",
              "PATCH",
              "POST",
              "PUT"
            ],
            "CachedMethods": [
              "GET",
              "HEAD"
            ],
            "TargetOriginId": "myS3Origin",
            "ForwardedValues": {
              "QueryString": false,
              "Cookies": {
                "Forward": "none"
              }
            },
            "ViewerProtocolPolicy": "allow-all",
            "MinTTL": 0,
            "DefaultTTL": 3600,
            "MaxTTL": 86400
          },
          "PriceClass": "PriceClass_200",
          "Restrictions": {
            "GeoRestriction": {
              "RestrictionType": "none",
            }
          },
          "ViewerCertificate": {
            "CloudFrontDefaultCertificate": true
          }
        }
      },
      "Metadata": {
        "SamResourceId": "CloudFrontDistribution"
      }
    },
    "SampleTable": {
      "Type": "AWS::DynamoDB::Table",
      "Metadata": {
        "SamResourceId": "SampleTable"
      },
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 2,
          "WriteCapacityUnits": 2
        }
      }
    },
    "CloudFrontOriginAccessControl": {
      "Type": "AWS::CloudFront::OriginAccessControl",
      "Properties": {
        "OriginAccessControlConfig": {
          "Name": {
            "Fn::Sub": "${WebSiteBucket} OAC"
          },
          "OriginAccessControlOriginType": "s3",
          "SigningBehavior": "always",
          "SigningProtocol": "sigv4"
        }
      },
      "Metadata": {
        "SamResourceId": "CloudFrontOriginAccessControl"
      }
    },
    "ApplicationResourceGroup": {
      "Type": "AWS::ResourceGroups::Group",
      "Properties": {
        "Name": {
          "Fn::Sub": "ApplicationInsights-SAM-${AWS::StackName}"
        },
        "ResourceQuery": {
          "Type": "CLOUDFORMATION_STACK_1_0"
        }
      },
      "Metadata": {
        "SamResourceId": "ApplicationResourceGroup"
      }
    },
    "getAllItemsFunction": {
      "Type": "AWS::Lambda::Function",
      "Metadata": {
        "SamResourceId": "getAllItemsFunction"
      },
      "Properties": {
        "Code": {
          "S3Bucket": "aws-sam-cli-managed-default-samclisourcebucket-cdm7fsxvrzmx",
          "S3Key": "full-stack/991609bebd584c4458cf5891bbcec92c"
        },
        "Description": "A simple example includes a HTTP get method to get all items by id from a DynamoDB table.",
        "Handler": "src/handlers/get-all-items.getAllItemsHandler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "getAllItemsFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 100,
        "Environment": {
          "Variables": {
            "SAMPLE_TABLE": {
              "Ref": "SampleTable"
            },
            "ENDPOINT_OVERRIDE": ""
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Architectures": [
          "x86_64"
        ]
      }
    },
    "getAllItemsFunctionApiPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "getAllItemsFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/",
            {
              "__ApiId__": {
                "Ref": "ApiGatewayApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    },
    "ApiGatewayApiProdStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiGatewayApiDeployment12742d3e7b"
        },
        "RestApiId": {
          "Ref": "ApiGatewayApi"
        },
        "StageName": "Prod",
        "TracingEnabled": true
      }
    },
    "WebSiteBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "WebSiteBucket"
        },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "PolicyForCloudFrontPrivateContent",
          "Statement": [
            {
              "Sid": "AllowCloudFrontServicePrincipal",
              "Effect": "Allow",
              "Principal": {
                "Service": "cloudfront.amazonaws.com"
              },
              "Action": "s3:GetObject",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "WebSiteBucket"
                    },
                    "/*"
                  ]
                ]
              },
              "Condition": {
                "StringEquals": {
                  "AWS:SourceArn": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:cloudfront::",
                        {
                          "Ref": "AWS::AccountId"
                        },
                        ":distribution/",
                        {
                          "Ref": "CloudFrontDistribution"
                        }
                      ]
                    ]
                  }
                }
              }
            }
          ]
        }
      },
      "Metadata": {
        "SamResourceId": "WebSiteBucketPolicy"
      }
    },
    "putItemFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "putItemFunctionRolePolicy0",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:PutItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                        {
                          "tableName": {
                            "Ref": "SampleTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*",
                        {
                          "tableName": {
                            "Ref": "SampleTable"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "getByIdFunction": {
      "Type": "AWS::Lambda::Function",
      "Metadata": {
        "SamResourceId": "getByIdFunction"
      },
      "Properties": {
        "Code": {
          "S3Bucket": "aws-sam-cli-managed-default-samclisourcebucket-cdm7fsxvrzmx",
          "S3Key": "full-stack/991609bebd584c4458cf5891bbcec92c"
        },
        "Description": "A simple example includes a HTTP get method to get one item by id from a DynamoDB table.",
        "Handler": "src/handlers/get-by-id.getByIdHandler",
        "MemorySize": 128,
        "Role": {
          "Fn::GetAtt": [
            "getByIdFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs18.x",
        "Timeout": 100,
        "Environment": {
          "Variables": {
            "SAMPLE_TABLE": {
              "Ref": "SampleTable"
            },
            "ENDPOINT_OVERRIDE": ""
          }
        },
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ],
        "TracingConfig": {
          "Mode": "Active"
        },
        "Architectures": [
          "x86_64"
        ]
      }
    },
    "getAllItemsFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "getAllItemsFunctionRolePolicy0",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:PutItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                        {
                          "tableName": {
                            "Ref": "SampleTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*",
                        {
                          "tableName": {
                            "Ref": "SampleTable"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "ApplicationInsightsMonitoring": {
      "Type": "AWS::ApplicationInsights::Application",
      "Properties": {
        "ResourceGroupName": {
          "Ref": "ApplicationResourceGroup"
        },
        "AutoConfigurationEnabled": "true"
      },
      "Metadata": {
        "SamResourceId": "ApplicationInsightsMonitoring"
      }
    },
    "getByIdFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
        ],
        "Policies": [
          {
            "PolicyName": "getByIdFunctionRolePolicy0",
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "dynamodb:GetItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:PutItem",
                    "dynamodb:Scan",
                    "dynamodb:Query",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:DescribeTable",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}",
                        {
                          "tableName": {
                            "Ref": "SampleTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*",
                        {
                          "tableName": {
                            "Ref": "SampleTable"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Tags": [
          {
            "Key": "lambda:createdBy",
            "Value": "SAM"
          }
        ]
      }
    },
    "getByIdFunctionApiPermissionProd": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "getByIdFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Sub": [
            "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/*",
            {
              "__ApiId__": {
                "Ref": "ApiGatewayApi"
              },
              "__Stage__": "*"
            }
          ]
        }
      }
    }
  }
}